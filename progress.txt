### 1. można samodzielnie utworzyć plik z rozszerzeniem *.rs i kompilować go
$ rustc main.rs

### 2. sprawdzanie jakości
$ rustfmt --check main.rs  <- wyrzuca diff z błędami
$ rustfmt main.rs <- formatuje automatycznie

### 3. polecenie `cargo` służy do tworzenia całego projektu
tworzy też w rodku repozytorium gitowe
$ cargo new hello_cargo  <- tworzy projektu

$ cargo build <- kompiluje projekt do celów devel
$ ./target/debug/hello_cargo  <- uruchomienie

$ cargo run <- 2 powyższe jednocześnie
$ cargo check <- do sprawdzenia czy jest kompilowalny

$ cargo build --release <- dłuższa kompilacja do szybszego kodu

### 4. TYPY DANYCH

let x = 5; <- tworzy immutable
let mut x = 5; <- tworzy mutable
const MAX_POINTS: u32 = 100_000;

można shadow-ować zmienne immutable powtarzając let
let x = 5;
let x = x + 1;
let x = x * 2;

let x: u32 = 5 <- unsigned int
let x: i32 = 5 <- signed int
let y: f32 = 2.0; <- float 32 / f32
let y = 3.0; <- float 64 (default) / f64

usize / isize - przydatne jako domyślny intowy typ, przydatny do rozpakowywania kolekcji

Typ bool
let flag = true;
let flag: bool = false;

Typ character
let c = 'x'; // only 1 char
let c2: char = 'y';



### KROTKI, mogą mieć elementy różnych typów, mają ustaloną długość
let k: (i32, f64, char) = (500, 66.5, 'c');

można indeksowac je korzystając z kropek (od 0)
let f = k.1;

można je rozpakowywać
let (x, y, z) = k;

### TABLICE, tylko ten sam typ, ustalona długość
let months = ["January", "February", "March"];
let a: [i32; 5] = [1, 2, 3, 4, 5]; // 5 elementów i32
let l: [i32; 5] = [3; 5];; // 5 elementów, każdy == 3

dostęp poprzez indexy
l[0] -> 1. element
l[4] -> ostatni element dla 5-elementowej listy


### 5.
zależności nazywamy skrzyniami "crate"

### FUNCTION

składnia
fn another_function(x: u32, y: f64) -> u32 {
    // code here
    5     // no semicolon, return 5
    value // return the value of 5 
}
STATEMENT - wyrażenie, które nie zwraca wartości, zakończone średnikiem
EXPRESSION - wyrażenie, które zwraca wartość, NIE zakończone średnikiem

### 6. dokumentacja developerska
$ cargo doc --open <- buduje i otwiera w przeglądarce dokumentację

### IF-ELSE

condition musi być boolowski, nie możemy porównywać intów/krotek itd.

if x == 5 {
    //code
} else if x == 6 {
    //code
} else {
    // code
}

można łączyć if-a z let-em

let condition = true;
let x = if condition { 5 } else { 6 }; //obydwie wartości muszą być tego samego typu

### OPERATORY LOGICZNE
if a==3 || a==5 - OR
if a==3 && b==4 - AND

### PĘTLE

1. nieskończona pętla LOOP z przypisaniem po break

let mut counter = 0;
let result = loop {
    counter += 1;
    if counter == 10 {
        break counter * 2;
    }
}

2. pętla WHILE
let i = 0;
while i < 3 {
    i+=1;
}

3. petla FOR
let mylist = [5,6,7,8];
for element in mylist.iter() {
    println!("{}", element);
}

pętla "range"
for n in 1..101 {
}

pętla "range", inclusywna z obydwu stron
for n in 1..=100 {
}


--- SKOŃCZONY ROZDZIAŁ 3
--- RODZIAŁ 4
stack - tu trzymamy wartości danych które są znane z gory, oraz wskaźniki do heap
heap - tu trzymamy wartości danych które nie są znane z góry. Jest to wolniejsze

{
  let x=5; // `x` jest znane tak długo jak pozostaje w scope
}

let x=5; // inicjalizujemy 5
let y=x; // kopiujemy wartość (operacje na stacku)

let s1 = String::from("hello"); // inicjalizujemy wartość na heap
let s2 = s1; // kopiujemy wskażnik! Nie kopiujejemy wartości, z powodu kosztownych operacjach na pamięci
Aby nie zwalniać dwukrotnie tego samego zasobu s1 "za wczasu" usuwane z dostępnych zmiennych!
s1 _was moved_ into s2

jeśli chcemy skopiować wartości na heap musimy użyć s1.clone()
let s1 = String::from("hello");
let s2 = s1.clone();
println!("{} {}", s1, s2);

Ta uwaga nie dotyczy kopii dokonywanych na stacku (jak powyżej w intami)
Typy kopiowane na Stacku (implemenetują Copy annotation)
- int
- bool
- float
- char
- tuple, ale tylko gdy wszystkie elementy zbioru implementują Copy np. (i32, i32)

Te same zasady dotyczą przekazywania ownership do-i-z funkcji (parametry fkcji, return)
fn takes_ownership(some_string: String) { // some_string comes into scope
    println!("{}", some_string);
}
let s = String::from("fufa");
takes_ownership(s);
// s is not longer available


aby uchronic się przed sztuckami typu ("przywracanie" wartości tuplami)
fn main() {
    let s1 = String::from("hello");
    let (s2, len) = calculate_length(s1);
    println!("The length of '{}' is {}.", s2, len);
}
można użyć Referencji

### REFERENCJE
Referencje powstrzymują przed przekazywaniem (traceniem) ownership na zmiennej

Referencja zwykła

fn main() {
    let s = String::from("hello");
    change(&s);
    // still we can use s
}

fn change(some_string: &String) {
    some_string.push_str(", world");
}

Referencja mutowalna

fn main() {
    let mut s = String::from("hello");
    change(&mut s);
    // s == "hello, world"
}

fn change(some_string: &mut String) {
    some_string.push_str(", world");
}

Ograniczenia
1. Można mieć wiele immutable rereferncji
2. Ale Może istnieć tylko 1 ref mut w scopie
3. Nie można mieszać zwykłych i mut referencji
4. Trzeba uważać z dangling reference (próba zwrócenia &s z funkcji)


### THE SLICE TYPE

Ponieważ konstrukcja typu

fn first_word(s: &String) -> usize {
    let bytes = s.as_bytes();

    for (i, &item) in bytes.iter().enumerate() {
        if item == b' ' {
            return i;
        }
    }

    s.len()
}
....
let mut s = String::from("hello world");
let word = first_word(&s); // word will get the value 5
s.clear(); // this empties the String, making it equal to ""

może prowadzić do poważnych turbulencji, ponieważ po wyczyszczeniu `s` index
do pierwszego słowa wciąż istnieje, ale jest nieaktualny.
Aby temu zapobiec możemy korzystać ze slice'ów

let hello = &s[0..5]; // działa analogicznie jak w pythonie.

Dzięki temu nasz program będzie wiedział kiedy operujemy na slice'ie i nie dopuści
do nieoczekiwanych błędów.

Przykładowa końcowa funkcja zwracająca pierwsze słowo z danego tekstu
(jeśli słowa nie da się wydzielić zwraca cały tekst)

fn first_word(s: &str) -> &str {
    let bytes = s.as_bytes();

    for (i, &item) in bytes.iter().enumerate() {
        if item == b' ' {
            return &s[0..i];
        }
    }

    &s[..]
}

Dodatkowa uwaga. &String, zwraca referencję do slice'a co możemy krócej zapisac jako &str

--- SKOŃCZONY ROZDZIAŁ 4 ---
--- RODZIAŁ 5 - Using Structs to Structure Related Data ---
--- ROZDZIAŁ 5.1 - Defining and Instantiating Structs ---
/* struktura prosta */
struct Person {
    username: String,
    email: String,
    sign_in_count: u64,
    active: bool
}

/* Tuple struct */
struct Color(u32, u32, u32);

/* budowanie struktury - funkcja - "kopiowanie" parametrów do struktury
fn build_person(username: String, email: String) -> Person {
    Person {
        username,
        email,
        sign_in_count: 2,
        active: false,
    }
}

/* inicjalizacja struktury */
let przemek = Person {
    username: String::from("Przemek"),
    email: String::from("p@w.com"),
    active: true,
    sign_in_count: 1,
}

/* inicjalizacja struktury z innej struktury */
let marek = Person {
    username: String::from("Marek"),
    email: String::from("m@m.com"),
    ..przemek // copy other values from przemek instance
};

/* inicjalizacja Tuple Struktury */
let color_green = Color(0, 255, 0);

/* Dostęp do struktury */
let m_username = marek.username;       // zwykła
let green_saturation = color_green.1;  // tuplowa

/* mut pozwala zmieniać dane w dowolnym polu struktury */
let mut zbyszek = build_person(String::from("Zbyszek"), String::from("z@z.com"));
zbyszek.active = true;

/* formatowanie dla println! (debug) */
Dodaj przed definicją struktury
#[derive(Debug)]

i w println!
println!("Rectangle: {:#?}", rectangle); // or {:?} - simple formatting

--- ROZDZIAŁ 5.2 - An example Program using structs ---
Aby dodać kontekstu dla danych i ich funkcji można zapakowac dane do struct.
Oczywiście można użyć naiwnego podejścia z int-ami, lub tuple'ami, chodzi o schludność kodu

struct Rectangle {
    width: u32,
    height: u32,
}

fn area(rectangle: &Rectangle) -> u32 {
    rectangle.width * rectangle.height
}

fn main() {
    let rect1 = Rectangle { width: 30, height: 50, };
    println("{}", area(&rect1);
}

--- ROZDZIAŁ 5.3 - Method syntax ---

Metody definiujemy w scope impl MyStruc{}.
Jedna struktura może mieć kilka implementacji

Metody w rust mogą
* przyjmować 1 argument &self. Mogą także przyjąć self, ale wtedy zabieramy ownership. Call: struct.meth()
* przyjmować kolejne argumenty (kolejne po &self)
* nie używać self, wtedy są "statyczne". Call: struct::meth()

impl Rectangle {
    // The simple method, with only 1 arg - self (&Self)
    fn circumference(&self) -> u32 {
        (self.width + self.height) * 2
    }

    // method that has more arguments
    fn can_hold(&self, other: &Rectangle) -> bool {
        self.width > other.width && self.height > other.height
    }

    // "static" method - assicoated function, we can use it to create 
    // a new rectangle (square in this case)
    // we call it using ::, Rectangle::square(70)
    fn square(size: u32) -> Rectangle {
        Rectangle {
            width: size,
            height: size
        }
    }
}


--- ROZDZIAŁ 6.1 ENUM ---

Enumy można definiować jak w każdym innym języku programowania.
Mogą przyjmować argumenty różnych typów (nawet struct) i mogą
definiować swoje funkcje

enum Message {
    Quit,
    Move { x: i32, y: i32 },
    Write(String),
    ChangeColor(i32, i32, i32)
}
impl Message {
    fn call(&self) {
        // some stuff here
    }
}

Specjalnym enum-em wbudowanym w język jest Option, który pozwala
zadeklarować Some lub None. Jest to jedyny sposób by utworzyć null-a w Rust
enum Option<T> {   // T <- dowolny typ
    None,
    Some(T)
}

let some_string = Some("a string");
let some_number = Some(5);
let absent_number: Option<i32> = None;

i w tej sytuacji nieżna dodawać zwykłego int-a do Some. Trzeba najpierw wykonać procedurę sprawdzania typów i null-i.

--- ROZDZIAŁ 6.2 MATCH ---

match pozwala przejść przez enuma i dla zadanego enuma zwracać wartość (dowolną), np

match coin {
    Coin::Penny => {
        println!("Lucky penny!");  // można wykonywać customowy kod przed returnem
        1
    }
    Coin::Nickel => 5,
    Coin::Dime => 10,
    Coin::Quarter => 25,
}

możemy używać 
_ => () -> jako "dopasuj pozostałe / nic nie rób jako sugar syntax
np.

match dice_roll {
    3 => add_fancy_hat(),
    7 => remove_fancy_hat(),
    _ => (),
}

Match używamy także do rozpakowywania Option, np.

fn plus_one(x: Option<i32>) -> Option<i32> {
    match x {
        None => None,
        Some(i) => Some(i + 1),
    }
}

--- ROZDZIAŁ 6.3 IF-LET ---

konstrukcja if let pozwala na pominięcie matcha, wtedy gdy chcemy sprawdzić
jakąś jedną wartość z enum-a. Można dodawać także else
np. 

let mut count = 0;
if let Coin::Quarter(state) = coin {
    println!("State quarter from {:?}!", state);
} else {
    count += 1;
}

co jest analogiczne do


let mut count = 0;
match coin {
    Coin::Quarter(state) => println!("State quarter from {:?}!", state),
    _ => count += 1,
}

--- RODZIAŁ 7 - PACKAGES, CRATES, MODULES ---
moduły ze ścieżką absolutną zaczynają się od crate::foo::bar
moduły ze ścieżką relatywną zaczynają się od foo::bar
słówko `pub` udostępnia moduł / funkcję / struct. Nie trzeba pisać pub dla enumów
importowanie odbywa się za pomocą `use`. Można importować na kilka sposobów

use std::cmp::Ordering;
use std::io;
// lub
use std::{cmp::Ordering, io};

use std::io;
use std::io::Write;
// lub
use std::io::{self, Write};

Można importować wszystko za pomocą *
use std::collections::*;


Przykład - chcemy utworzyć funkcję istniejącą w innym module, a następnie wywołać ją w libs.rs (cargo project)

# src/lib.rs
mod front_of_house;

pub use crate::front_of_house::hosting;

pub fn eat_at_restaurant() {
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
    hosting::add_to_waitlist();
}


# src/front_of_house.rs
pub mod hosting;  // lub definiowanie tu wszystkiego jeśli nie chcemy katalogu


# src/front_of_house/hosting.rs
pub fn add_to_waitlist() {}

---------- RODZIAŁ 8.1 - VECTORY

Tworzenie wektora
let v: Vec<i32> = Vec::new();
lub
let v = vec![1,2,3];

Update vectora
v.push(7);

Pobieranie z vectora (klasycznie)
match v.get(2) {
    Some(third) => println!("The third element is {}", third),
    None => println!("There is no third element."),
}

można równiesz za pomocą nawiasów [], ale wtedy może wyskoczyć panic!
let does_not_exist = &v[100];

Iterowanie i update za pomocą dereferencji(*)

let mut v = vec![100, 32, 57];
for i in &mut v {
    *i += 50;
}

---------- RODZIAŁ 8.2 - STRINGS

let s = String::from("abc");
jest tym samym co
let s = "abc".to_string();

Operacje na String
s.push_str("bar"); // dodaje string ze slice'a
s.push('q'); // dodaje pojedynczą literę

Stringi można dodawać, ale(!) 1. arg to String który oddaje ownership, każdy kolejny to slice, np
let s1 = String::from("Hello, ");
let s2 = String::from("world!");
let s3 = s1 + &s2; // s1 oddaje ownership dla s3

format!("{}"); // to makro które tworzy nowy string

Indexowanie
Nie można indeksować po stringu, ponieważ ten przechowuje unicody w postaci bajtów
Więc przy unicode 1 znak może zajmować 1 lub więcej bajtów
Więc nawet jak robimy slice, trzeba uważać, bo konstrukcja jak &hello[0..1] może doprowadzić do panic!

---------- RODZIAŁ 8.2 - HASH MAP

Tworzenie hashmapy

use std::collections::HashMap;
let mut scores = HashMap::new();

scores.insert(String::from("Blue"), 10);
scores.insert(String::from("Yellow"), 50);

Pobieranie wartości do Some/None
let team_name = String::from("Blue");
let score = scores.get(&team_name);

iterowanie po mapie
for (key, value) in &scores {
    println!("{}: {}", key, value);
}

mapy można nadpisywać, gdy ponownie używjemy tego samego klucza
scores.insert(String::from("Blue"), 10);
scores.insert(String::from("Blue"), 25);

get-or-insert
scores.insert(String::from("Blue"), 10);
scores.entry(String::from("Yellow")).or_insert(50); // doda "Yellow": 50
scores.entry(String::from("Blue")).or_insert(50);  // nic nie zrobi, bo Blue już istnieje
